Make sure that objects are initialized before they're used.

1줄 요약 : 객체를 사용하기 전에 객체의 모든 것을 초기화 해주자!

클래스는 최대한 초기화리스트를 이용해 초기화를 하자
const type과 reference type은 반드시 초기화 되야 한다
두 type은 대입이 불가능하기 때문임

긴 초기화 리스트가 보기 싫을 경우 대입으로 초기화가 가능한
멤버는 private 멤버 함수에 대입 연산을 넣고 그 함수를
초기화시 호출 하는 방법을 사용해도 된다
다만 초기화 리스트를 이용하는 것을 권장!

객체를 구성하는 데이터의 초기화 순서는
1. 기본 클래스가 파생 클래스보다 먼저 초기화 됨
2. 클래스 데이터 멤버는 선언한 순서대로 초기화 됨
(초기화 리스트의 순서와는 상관 없음)

비지역 정적 객체의 초기화 순서는 개별 번역 단위에서 정해진다

정적 객체(static object)는 생성된 시점부터 프로그램이 끝날 때 까지
살아있는 객체이다
이에 포함되는 객체는
1. 전역 객체
2. namespace 유효 범위에서 정의된 객체
3. class 안에서 static으로 선언된 객체
4. function 안에서 static으로 선언된 객체
5. 파일의 유효 범위에서 static으로 정의된 객체
가 있다

이 중 함수 안에 있는 정적 객체는
지역 정적 객체(local static object)라고 하고
나머지는 비지역 정적 객체(non-local static object)라고 한다

번역 단위(translation unit)는 컴파일을 통해 
하나의 목적 파일(object file)을 만드는 바탕이 되는 소스 코드이다
번역 - 소스의 언어를 기계어로 옮기는 작업
기본적으로 소스 파일 하나가 되고, 그 파일이 #include한 파일까지 
합쳐서 하나의 번역 단위가 된다

별개의 번역 단위에서 정의된 비지역 정적 객체들의 초기화 순서는
정해져 있지 않다


Review:
기본제공 타입의 객체는 직접 손으로 초기화한다.
생성자에서는, 데어테 멤버에 대한 대입문을 생성자 본문 내부에 넣는 방법으로
초기화하지 말고 멤버 초기화 리스트를 사용하자.
초기화 리스트에 데이터 멤버를 나열할 때는 클래스에 선언한 순서대로 나열하자.
여러 번역 단위에 있는 비지역 정적 객체들의 초기화 순서 문제는 피해서 설계해야 한다.
비지역 정적 객체를 지역 정적 객체로 바꾸는 것이 좋음

